<?php

namespace Antidote\LaravelCart\Models;

use Antidote\LaravelCart\Concerns\ConfiguresProduct;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\MorphTo;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Str;

class Product extends Model
{
    use ConfiguresProduct;
    use SoftDeletes;

    protected $table = 'products';

    /**
     * @var array array of attributes that should be obtained from the Product Data Type
     */
    protected array $product_data = [];

    /**
     * @var array array of Product Data Type classes where validity should be checked. The Product Data Type should provide the method `isValid` returning a boolean
     */
    protected array $product_validity = [];

    public function productType() : MorphTo
    {
        return $this->morphTo()->withTrashed();
    }

    protected static function booted()
    {
        static::deleted(function ($product) {

            //@todo tighten this up and ensure items are not deleted when attached to other items such as orders
            if($product->isForceDeleting() && $product->productType) {
                $product->productType->forceDelete();
            } elseif($product->productType) {
                $product->productType->delete();
            }
        });

        //@see https://stackoverflow.com/a/63902244
        if(in_array(SoftDeletes::class, class_uses_recursive(static::class))) {

            static::restored(function ($product) {

                $product->productType->restore();

            });

        }
    }

    public function __call($method, $parameters)
    {
        //@todo implment deferring validity with product_validity
        if($method == 'checkValidity') {
            return $this->productType->isValid(...$parameters);
        }

        $product_methods = collect($this->product_data)
            ->map(fn($product_data) => 'get' . Str::studly($product_data))
            ->toArray();

        if(in_array($method, $product_methods)) {
            //defer to product data type
            if(method_exists($this->productType, $method )) {
                return $this->productType->$method(...$parameters);
            } else {
                throw new \Exception("Define '{$method}' on ".get_class($this->productType));
            }
        }

        return parent::__call($method,$parameters); // TODO: Change the autogenerated stub
    }

    public function getPrice(array $product_data = []): int
    {
        return $this->productType->getPrice($product_data);
    }

    public function getName(array $product_data = []): string
    {
        return $this->productType->getName($product_data);
    }

    public function getDescription(array $product_data =  []): string
    {
        return $this->productType->getDescription($product_data);
    }


}
