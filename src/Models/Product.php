<?php

namespace Antidote\LaravelCart\Models;

use Antidote\LaravelCart\Concerns\IsProduct;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\MorphTo;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Str;

abstract class Product extends Model implements \Antidote\LaravelCart\Contracts\Product
{
    use IsProduct;

    public function productDataType() : MorphTo
    {
        return $this->morphTo()->withTrashed();
    }

    protected static function booted()
    {
        static::deleted(function ($product) {

            $product->productDataType->delete();
        });

        //@see https://stackoverflow.com/a/63902244
        if(in_array(SoftDeletes::class, class_uses_recursive(static::class))) {

            static::restored(function ($product) {

                $product->productDataType->restore();

            });

        }

        static::forceDeleted(function ($product) {

            $product->productDataType->forceDelete();
        });
    }

    public function __call($method, $parameters)
    {
        if($method == 'checkValidity') {
            if(in_array(get_class($this->productDataType), $this->product_validity )) {
                return $this->productDataType->isValid(...$parameters);
            } else {
                return $this->isValid(...$parameters);
            }
        }

        $product_methods = collect($this->product_data)
            ->map(fn($product_data) => 'get' . Str::studly($product_data))
            ->toArray();

        if(in_array($method, $product_methods)) {
            //defer to product data type
            if(method_exists($this->productDataType, $method )) {
                return $this->productDataType->$method(...$parameters);
            } else {
                throw new \Exception("Define {$method} on ".get_class($this->productDataType));
            }
        }

        return parent::__call($method,$parameters); // TODO: Change the autogenerated stub
    }
}
